// @generated by protobuf-ts 2.9.6
// @generated from protobuf file "paytowin.proto" (package "PayToWin", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { PayToWin } from "./paytowin";
import type { EffectResponse } from "./paytowin";
import type { EffectRequest } from "./paytowin";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { PlayersResponse } from "./paytowin";
import type { PlayersRequest } from "./paytowin";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service PayToWin.PayToWin
 */
export interface IPayToWinClient {
    /**
     * @generated from protobuf rpc: GetPlayers(PayToWin.PlayersRequest) returns (stream PayToWin.PlayersResponse);
     */
    getPlayers(input: PlayersRequest, options?: RpcOptions): ServerStreamingCall<PlayersRequest, PlayersResponse>;
    /**
     * @generated from protobuf rpc: ApplyEffect(PayToWin.EffectRequest) returns (PayToWin.EffectResponse);
     */
    applyEffect(input: EffectRequest, options?: RpcOptions): UnaryCall<EffectRequest, EffectResponse>;
}
/**
 * @generated from protobuf service PayToWin.PayToWin
 */
export class PayToWinClient implements IPayToWinClient, ServiceInfo {
    typeName = PayToWin.typeName;
    methods = PayToWin.methods;
    options = PayToWin.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: GetPlayers(PayToWin.PlayersRequest) returns (stream PayToWin.PlayersResponse);
     */
    getPlayers(input: PlayersRequest, options?: RpcOptions): ServerStreamingCall<PlayersRequest, PlayersResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<PlayersRequest, PlayersResponse>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ApplyEffect(PayToWin.EffectRequest) returns (PayToWin.EffectResponse);
     */
    applyEffect(input: EffectRequest, options?: RpcOptions): UnaryCall<EffectRequest, EffectResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<EffectRequest, EffectResponse>("unary", this._transport, method, opt, input);
    }
}
